- content_for :head do
  %script{src: "https://cdn.jsdelivr.net/npm/signature_pad@2.3.2/dist/signature_pad.min.js"}
  %script{src: "https://cdn.jsdelivr.net/npm/jsignature@2.1.2/libs/jSignature.min.js"}
  
  %script{src: "https://cdn.jsdelivr.net/npm/cropit@0.5.1/dist/jquery.cropit.min.js"}
  :javascript
    function registerTouch() {
      $("#signature_capture").show();   
      var canvas = $("canvas#signature_field").get(0);
      var signaturePad = new SignaturePad(canvas, {
          minWidth: 1,
          maxWidth: 1,
          minDistance: 1,
          dotSize: 1.0
      });
      
      $("#signature_capture2").show();   
      jSig = $("#signature_field2").jSignature();

      $("#signature_clear").click(function() {
        signaturePad.clear();
        jSig.jSignature("reset") 
      })
      
    };
    
    $(document).ready(function() {
      function showControls() {
        $("#signature-cropper .controls").show();
      }
      function hideControls() {
        $("#signature-cropper .controls").hide();
      }
      function removeSignature() {
        $('#signature-cropper .cropit-preview-image').removeAttr('src');
        $('#signature-cropper .cropit-preview-background').removeAttr('src');     
        $("#state_registrants_pa_registrant_voter_signature_image").val('')   
        hideControls();
      }
      $("#signature-cropper .remove-image-btn").click(removeSignature);
      
      function adjustSignature() {
        try {
          var imageData = $('#signature-cropper').cropit('export');
          $("#state_registrants_pa_registrant_voter_signature_image").val(imageData);          
          
        } catch(err) { console.error(err) }
      }
      function selectSignatureType() {
        if ($("#signature_method_upload:checked").length > 0) {
          $('#signature-cropper').show().cropit({
            freeMove: true,
            minZoom: 'fit',
            exportZoom: 0.5,
            onFileChange: showControls,
            onZoomChange: adjustSignature,
            onOffsetChange: adjustSignature
          });      
        } else {
          $('#signature-cropper').hide()
        }
        if ($("#signature_method_device:checked").length > 0) {
          $("#continue_on_device").show();
        } else {
          $("#continue_on_device").hide();
        }
      } 
      
      function togglePenndotNumber() {
        if ($("#state_registrants_pa_registrant_confirm_no_penndot_number:checked").length > 0) {
          $("#penndot_set").hide();
          if (!window.IS_TOUCH_ENABLED) {
            $("#signature_upload").show();            
          }
        } else {
          $("#penndot_set").show();
          
          $("#signature_upload").hide();
        }              
      }

      function toggleSsn4() {
        if ($("#state_registrants_pa_registrant_confirm_no_dl_or_ssn:checked").length > 0 ) {
          $(".registrant-form__ssn4__line").hide();
        } else {
          $(".registrant-form__ssn4__line").show();
        }
      }
      
      function toggleAssistant() {
        if ($("#state_registrants_pa_registrant_has_assistant:checked").length > 0) {
          $("#assistant_set").show();
        } else {
          $("#assistant_set").hide();
        }        
      }
      
      
      function toggleOtherParty() {
        var party = $("#state_registrants_pa_registrant_party").val().toLowerCase()
        if (party=='other' || party=='otros') {
          $("#other_party_set").show();          
        } else {
          $("#other_party_set").hide();
        }        
      }
      
      $("#state_registrants_pa_registrant_party").change(toggleOtherParty)
      toggleOtherParty();
      $("#state_registrants_pa_registrant_confirm_no_penndot_number").click(togglePenndotNumber)
      togglePenndotNumber();      
      $("#state_registrants_pa_registrant_confirm_no_dl_or_ssn").click(toggleSsn4)
      toggleSsn4();      
      $("#state_registrants_pa_registrant_has_assistant").click(toggleAssistant)
      toggleAssistant();
      
      $("[name=state_registrants_pa_registrant_signature_method]").click(selectSignatureType)
      $('.select-image-btn').click(function() {
        $('.cropit-image-input').click();
      });
    });
      
      

= form_for(@registrant, url: update_state_registrant_path(controller.current_state, @registrant.to_param)) do |form|

  = render partial: 'state_registrants/locale_selector', locals: {form: form }

  = render partial: 'state_registrants/pa/header'

  = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :change_of_party, class_name: "registrant-form__change-of-party__line", required: false}

  %ul.flat.party-dropdown
    = field_li(form, :party, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__party__line"}, select_options: @registrant.state_parties , field_options: {include_blank: true} })
    
  %fieldset#other_party_set
    %ul.flat.other-party
      = field_li(form, :other_party, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__other-party__line"}})
    
  
  %ul.flat.race-dropdown
    = field_li(form, :race, {skip_tooltip: true, required: false, li_options: {class: "registrant-form__race__line"}, select_options: @registrant.races, field_options: {include_blank: true} })
  
  %fieldset#penndot_set
    %ul.flat.penndot-number
      = field_li(form, :penndot_number, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__penndot-number__line"} })
    %p.instructions
      = I18n.t('states.custom.pa.penndot_number_instructions')

  
    
  = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :confirm_no_penndot_number, class_name: "registrant-form__no-penndot-number__line", required: false}

  #signature_capture
    %canvas#signature_field
    
    #signature_clear
      %br 
      %br
      Clear Signatures
      %br 
      %br
    
  #signature_capture2
    #signature_field2
    
    
  %fieldset#signature_upload
    %p.instructions 
      You must provide a signature if you do not have a PennDOT ID. You may choose to 
    %ul#signature_method.checkbox.signature-method
      %li
        %input#signature_method_upload{type: "radio", name: "state_registrants_pa_registrant_signature_method", value: "upload"}
        %label{for: "signature_method_upload"} Upload a signature image
        #signature-cropper
          %br
          .select-image-btn.rollover_button
            %a
              %span.button-style 
                Select an image to upload
          
          %br
          %p.instructions
            Must be an image file (JPEG, PNG, or GIF)
          .cropit-preview
          
          .controls{style: "display: none;"}
            %input{type: "range", class: "cropit-image-zoom-input"}
            %br
            %p.instructions
              Zoom in or out to ensure the signature fits within the box.
            .remove-image-btn.rollover_button
              %a
                %span.button-style 
                  Remove Image
          %input{type: "file", class: "cropit-image-input", style: "display: none;"}
          %br
          %br
        = form.hidden_field :voter_signature_image

      %li
        %input#signature_method_device{type: "radio", name: "state_registrants_pa_registrant_signature_method", value: "device"}
        %label{for: "signature_method_device"} Continue your registration on a touch-enabled device
        #continue_on_device
          %p.instructions
            Open this link on a touch-enabled device to finish your registration:
            = update_state_registrant_url(controller.current_step_name, @registrant.to_param)
          %p.instructions
            = label_tag :sms_number_for_continue_on_device, "Text me the link:"
            = text_field_tag :sms_number_for_continue_on_device, @registrant.phone
            = rollover_button(:next_step, I18n.t('txt.button.text_me').html_safe)  
          %p.instructions
            = label_tag :email_address_for_continue_on_device, "Email me the link:"            
            = text_field_tag :email_address_for_continue_on_device, @registrant.email
            = rollover_button(:next_step, I18n.t('txt.button.email_me').html_safe)  
      %li
        %input#signature_method_print{type: "radio", name: "state_registrants_pa_registrant_signature_method", value: "print"}
        %label{for: "signature_method_print"} Print and mail a PDF
      
    
    
    
  
  %fieldset#ssn4_set
    %ul.flat.ssn4
      = field_li(form, :ssn4, {skip_tooltip: true, required: false, li_options: {class: "registrant-form__ssn4__line"} })
      
    = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :confirm_no_dl_or_ssn, class_name: "registrant-form__no-ssn4__line", required: false}
      
    
  = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :has_assistant, class_name: "registrant-form__has-assistant__line", required: false}
    
  %fieldset#assistant_set
    %ul.stacked
      = field_li(form, :assistant_name, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__assistant-name__line"} })
    %ul.stacked
      = field_li(form, :assistant_address, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__assistant-address__line"} })
    %ul.stacked
      = field_li(form, :assistant_phone, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__assistant-phone__line"} })
    
    .declaration-text
      = t('states.custom.pa.assistant_declaration').html_safe
    = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :confirm_assistant_declaration, class_name: "registrant-form__assistant-confirmation__line", required: true}


  = rollover_button(:next_step, I18n.t('txt.button.submit').html_safe)  
  .back    
    = link_to t('txt.button.back').html_safe, update_state_registrant_path(controller.prev_step, @registrant.to_param)